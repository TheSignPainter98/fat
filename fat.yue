local *

import apply_compat, test_compat from require 'compat'
apply_compat!

import declare_type from require 'quicktype'
declare_type 'Self', 'some'

import Args from require 'fat.args'
import run_tests from require 'spec'
import 'fat.logger'
import log from require 'fat.logger'
import 'spec'
import F from require 'quicktype'
import detect_and_use_monitor from require 'fat.monitor'

clean = require 'fat.clean.main'
disable = require 'fat.disable.main'
enable = require 'fat.enable.main'
init = require 'fat.init.main'
start = require 'fat.start.main'

require 'fat.state' -- TODO(kcza): remove me, just for testing
require 'fat.peripheral.uplink' -- TODO(kcza): remove me, just for testing
require 'fat.peripheral.platform' -- TODO(kcza): remove me, just for testing
require 'fat.peripheral.stockpile' -- TODO(kcza): remove me, just for testing
require 'fat.config' -- TODO(kcza): remove me, just for testing

global skip_minecraft_tests = false

main = (raw_args) ->
  args, ok = Args::parse raw_args
  if not ok
    return

  logger.set_log_verbosity args.verbose
  spec.set_log_verbosity args.verbose

  if args.test?
    detect_and_use_monitor!

    skip_minecraft_tests = args.test.no_minecraft
    run_tests args.test.filter
  else if args.start?
    detect_and_use_monitor!
    start.main args.start
  else if args.init?
    init.main args.init
  else if args.clean?
    clean.main args.clean
  else if args.enable?
    enable.main args.enable
  else if args.disable?
    disable.main args.disable
  else
    error 'internal error: no command recognised'

spec.spec ->
  import describe, it from require 'spec'

  describe 'compat', ->
    it 'passes checks', ->
      test_compat!

args = {...}
try
  main args
catch err
  print debug.traceback err
