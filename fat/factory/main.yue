local *

import log from require 'fat.logger'
import Station from require 'fat.peripheral.station'
import Stockpile from require 'fat.peripheral.stockpile'
import IdempotenceToken, Packet, Uplink from require 'fat.peripheral.uplink'
import declare_type, F from require 'quicktype'
import spec from require 'spec'

export default_config = [=[
[factory]
name = '<factory-name>'
network = 'mainline'

[[stations]]
name = '<station-name>'
# produces = '<resource-name>'
# consumes = '<resource-name>'
]=]

export main = F '({}) -> <>', (config) ->
  print 'starting factory'
  with Factory config, {Station!}, Stockpile!, Uplink!
    \run!

class Factory
  new: F '({}, [Station], Stockpile, Uplink) => <>', (@config, @stations, @stockpile, @uplink) =>

  name: F '() => string', =>
    @config.factory.name

  run: F '() => !', =>
    -- TODO(kcza): register self, repeat every 10s until ready
    while true
      @step!

  step: F '() => <>', =>
    from_id, message = @uplink\receive_from_any!
    if not from_id?
      return

    switch message\protocol!
      when 'StockpileRequest'
        @on_stockpile_request from_id, message
      when 'ScheduleRequest'
        @on_schedule_request from_id, message
      when 'InfoRequest'
        @on_info_request from_id, message
      else
        print "ignoring #{message\protocol!} message"

  on_stockpile_request: F '(number, Packet) => <>', (requester, request) =>
    log -> 'handling stockpile request'

    info = @stockpile\info!
    @uplink\send_to requester, StockpileResponse request.idemp_tok, info

  on_schedule_request: F '(number, Packet) => <>', (requester, request) =>
    log -> 'handling schedule request'
    error 'todo'

  on_info_request: F '(number, Packet) => <>', (requester, request) =>
    log -> 'handling info request'

    stockpile_info = @stockpile\info!
    station_infos = [ station\info! for station in *@stations ]
    response = InfoResponse request.idemp_tok, @name!, station_infos, stockpile_info
    @uplink\send_to requester, response

class StockpileRequest extends Packet
  new: F '(IdempotenceToken) => <>', (@idemp_tok) =>

class StockpileResponse extends Packet
  new: F '(IdempotenceToken, StockpileInfo) => <>', (@idemp_tok, @info) =>

class ScheduleRequest extends Packet
  new: F '(IdempotenceToken, Schedule) => <>', (@idemp_tok, @schedule) =>

class ScheduleResponse extends Packet
  new: F '(IdempotenceToken, ?string) => <>', (@idemp_tok, @error_reason) =>

class InfoRequest extends Packet
  new: F '(IdempotenceToken) => <>', (@idemp_tok) =>

class InfoResponse extends Packet
  new: F '(IdempotenceToken, string, [StationInfo], StockpileInfo) => <>', (@idemp_tok, @name, @station_infos, @stockpile_info) =>

spec ->
  import TestStationBackend from require 'fat.peripheral.station'
  import TestStockpileBackend from require 'fat.peripheral.stockpile'
  import TestUplinkBackend from require 'fat.peripheral.uplink'
  import assert_that, describe, expect_that, it, matchers from require 'spec'
  import deep_eq, eq, has_fields, len from matchers

  describe 'Factory', ->
    it 'responds to stockpile requests', ->
      sent = {}
      SERVER_ID = 12345
      idemp_tok = IdempotenceToken!

      config = {}
      stations =
        * Station TestStationBackend!
      stockpile = Stockpile TestStockpileBackend
        size: => 1
        slot_content: (i) =>
          assert_that i, eq 1
          count: 32, displayName: 'Stone Bricks'
        slot_capacity: (i) =>
          assert_that i, eq 1
          64
      uplink = Uplink TestUplinkBackend
        receive: (_, _) =>
          @count ??= 1
          if @count == 1
            @count += 1
            return SERVER_ID, (StockpileRequest idemp_tok), StockpileRequest\protocol!
          nil, nil, nil
        send: (recipient, message, protocol) =>
          sent[] = :recipient, :message, :protocol
          true
      factory = Factory config, stations, stockpile, uplink

      for _ = 1, 10
        factory\step!

      expect_that sent, len eq 1
      expect_that sent[1], has_fields
        recipient: eq SERVER_ID
        message: has_fields
          idemp_tok: eq idemp_tok
          info: has_fields
            item: eq 'Stone Bricks'
            stored: eq 32
            capacity: eq 64
        protocol: eq StockpileResponse\protocol!

    it 'responds to info requests', ->
      sent = {}
      SERVER_ID = 12345
      idemp_tok = IdempotenceToken!

      config =
        factory:
          name: 'test-factory-name'
      stations =
        * Station TestStationBackend
            name: => 'test-station-name'
            train_name: =>
              @count ??= 1
              if @count == 1
                @count += 1
                'test-train-name'
              else
                nil
      stockpile = Stockpile TestStockpileBackend
        size: => 1
        slot_content: (i) =>
          assert_that i, eq 1
          count: 32, displayName: 'Stone Bricks'
        slot_capacity: (i) =>
          assert_that i, eq 1
          64
      uplink = Uplink TestUplinkBackend
        receive: (_, _) =>
          @count ??= 1
          if @count <= 2
            @count += 1
            SERVER_ID, (InfoRequest idemp_tok), InfoRequest\protocol!
          else
            nil, nil, nil
        send: (recipient, message, protocol) =>
          sent[] = :recipient, :message, :protocol
          true
      factory = Factory config, stations, stockpile, uplink

      for _ = 1, 10
        factory\step!

      expect_that sent, len eq 2
      expect_that sent[1], has_fields
        recipient: eq SERVER_ID
        message: has_fields
          idemp_tok: eq idemp_tok
          name: eq 'test-factory-name'
          station_infos: deep_eq
            * name: 'test-station-name'
              train_name: 'test-train-name'
          stockpile_info: has_fields
            item: eq 'Stone Bricks'
            stored: eq 32
            capacity: eq 64
        protocol: eq InfoResponse\protocol!
      expect_that sent[2], has_fields
        recipient: eq SERVER_ID
        message: has_fields
          idemp_tok: eq idemp_tok
          name: eq 'test-factory-name'
          station_infos: deep_eq
            * name: 'test-station-name'
              train_name: nil
          stockpile_info: has_fields
            item: eq 'Stone Bricks'
            stored: eq 32
            capacity: eq 64
        protocol: eq InfoResponse\protocol!
