local *

import log from require 'fat.logger'

specs = nil
failed = false

export spec = (fn) ->
  if not specs?
    specs = {}
  specs[] = fn

root_spec = nil
current_spec = nil
current_spec_kind = 'describe'
export describe = (what, fn) ->
  declare_spec_section 'describe', what, fn

export it = (what, fn) ->
  declare_spec_section 'it', what, fn

declare_spec_section = (kind, what, fn) ->
  if not root_spec?
    root_spec = Spec::root!
  if not current_spec?
    current_spec = root_spec

  if current_spec.kind != 'describe'
    error "cannot use `#{kind}` in `#{current_spec.kind}` spec"

  switch kind
    when 'describe'
      parent_spec = current_spec

      current_spec = Spec kind, what, parent_spec
      fn!

      parent_spec\add_child current_spec
      current_spec = parent_spec
    when 'it'
      current_spec\add_child Test what, fn, current_spec

class ItRun
  new: =>
    @failures = {}

  fail: (cause, message) =>
    if message?
      @failures[] = "#{message}: #{cause}"
    else
      @failures[] = cause

current_it_run = nil

class Spec
  @root: =>
    Spec 'describe', nil, nil

  new: (@kind, @name, @parent) =>
    @children = {}

  add_child: (child) =>
    @children[] = child

  desc: =>
    rev_parts = with {@name}
      spec = @parent
      while spec?
        [] = spec.name
        spec = spec.parent
    parts = with {}
      n = #rev_parts
      for i = 1, n
        [i] = rev_parts[n - i + 1]
    table.concat parts, ' '

  test: =>
    log ->
      if @name?
        "testing #{@desc!}..."
      else
        "running test suite..."
    for child in *@children
      child\test!

class Test
  new: (@name, @assertions_fn, @spec) =>

  @test_failure_header_output: false

  test: =>
    current_it_run = ItRun!
    try
      @assertions_fn!
    catch err
      current_it_run\fail "error thrown: #{err}"

    if #current_it_run.failures > 0
      if not @@test_failure_header_output
        print 'SOME TESTS FAILED:'
        @@test_failure_header_output = true
      print "* #{@spec\desc!} #{@name}:"
      for failure in *current_it_run.failures
        print "  * #{failure}"


export run_tests = ->
  -- Gather specs
  if not specs?
    return
  for spec_fn in *specs
    spec_fn!

  root_spec?\test!

  if failed
    error "some checks failed"
