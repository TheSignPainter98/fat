local *

import log from require 'freight.logger'
import Uplink from require 'freight.peripheral.uplink'
import UpgradeListener from require 'freight.upgrade.listener'
import StateMachineBuilder, StateSpec from require 'freight.state'
import toml_parse from require 'freight.toml'
import declare_type, F from require 'quicktype'

export default_config = [=[
[marshal]
network = 'mainline'
]=]

export main = F '(MarshalConfig) -> <>', (config) ->
  log -> 'starting marshal'

  state = nil
  with? io.open '.freight-state.toml'
    state = toml_parse assert \read '*a'
    assert \close!

  uplink = Uplink!
  upgrade_listener = UpgradeListener config, uplink
  with Marshal config, uplink, upgrade_listener
    \run!

STEP_INTERVAL = 60

declare_type 'Network', [[{
  name: string,
  factories: [Factory],
  stations: [Station],
}]]
declare_type 'Factory', [[{
  stockpile: StockpileInfo,
}]]
declare_type 'Train', [[{
  name: string,
  state: StateMachine,
}]]

declare_type 'MarshalConfig', [[{
  marshal: {
    network: string,
  },
}]]
class Marshal
  new: F '(MarshalConfig, Uplink, UpgradeListener) => <>', (@config, @uplink, @upgrade_listener) =>

  @state_machine: F '() => StateMachine', =>
    StateMachineBuilder!
      \set_initial_state 'initing'
      \add_state with StateSpec 'initing'
        \add_transition_to 'waiting'
      \add_state with StateSpec 'waiting'
        \add_field 'networks', '{string->Network}'
        \add_field 'trains', '{string->Train}'
        \add_field 'station_networks', '{string->string}'
        \add_field 'factory_names', '{string}'
      \build!

  run: F '(?StateMachine) => !', (state=@@state_machine!) =>
    parallel.waitForAny @upgrade_listener\listen,
      @\run_steps,

  run_steps: F '() => !', =>
    @i = 1
    while true
      @step!

  step: F '() => <>', =>
    print @i
    @i += 1
    os.sleep STEP_INTERVAL
